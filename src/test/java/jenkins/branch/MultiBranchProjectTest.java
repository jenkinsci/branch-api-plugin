package jenkins.branch;

import hudson.model.FreeStyleProject;
import hudson.scm.NullSCM;
import jenkins.branch.harness.MultiBranchImpl;
import jenkins.scm.impl.SingleSCMSource;
import org.junit.Rule;
import org.junit.Test;
import org.jvnet.hudson.test.Issue;
import org.jvnet.hudson.test.JenkinsRule;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

/**
 * @author Stephen Connolly
 */
public class MultiBranchProjectTest {

    @Rule
    public JenkinsRule j = new JenkinsRule();

    @Test
    public void smokes() {
        assertThat(MultiBranchProject.rawDecode("Hello world"), is("Hello world"));
        assertThat(MultiBranchProject.rawDecode("Hello+world"), is("Hello+world"));
        assertThat(MultiBranchProject.rawDecode("origin/production"), is("origin/production"));
        assertThat(MultiBranchProject.rawDecode("origin%2fproduction"), is("origin/production"));
        assertThat(MultiBranchProject.rawDecode("origin%2Fproduction"), is("origin/production"));
        assertThat(MultiBranchProject.rawDecode("origin%production"), is("origin%production"));
        assertThat(MultiBranchProject.rawDecode("origin%foo"), is("origin%foo"));
        assertThat(MultiBranchProject.rawDecode("origin%2f50%"), is("origin/50%"));
        assertThat(MultiBranchProject.rawDecode("origin%2f50%2"), is("origin/50%2"));
        assertThat(MultiBranchProject.rawDecode("origin%2f50%26"), is("origin/50&"));
    }

    @Issue("JENKINS-34304")
    @Test
    public void updateBranch() throws Exception {
        MultiBranchImpl project = j.jenkins.createProject(MultiBranchImpl.class, "test");

        DefaultBranchPropertyStrategy strategy1 = new DefaultBranchPropertyStrategy(new BranchProperty[]{new RateLimitBranchProperty(1, "hour")});

        BranchSource dummy1BranchSource = new BranchSource(new SingleSCMSource("dummy1", "dummy1", new NullSCM()));
        BranchSource dummy2BranchSource = new BranchSource(new SingleSCMSource("dummy2", "dummy2", new NullSCM()));

        dummy1BranchSource.setStrategy(strategy1);
        dummy2BranchSource.setStrategy(strategy1);

        project.getSourcesList().add(dummy1BranchSource);
        project.getSourcesList().add(dummy2BranchSource);

        // Schedule an indexing to populate the jobs
        project.scheduleBuild2(0).getFuture().get();
        assertThat(project.getItems().size(), is(2));

        FreeStyleProject dummy1Project = project.getItem("dummy1");
        FreeStyleProject dummy2Project = project.getItem("dummy2");

        // Save the branches generated by the first indexing
        Branch branch1 = getBranch(dummy1Project);
        Branch branch2 = getBranch(dummy2Project);

        // Schedule a second indexing without changing anything and ensure the branches are equal
        project.scheduleBuild2(0).getFuture().get();
        assertThat(getBranch(dummy1Project), is(branch1));
        assertThat(getBranch(dummy2Project), is(branch2));

        // Change a property, schedule a third indexing, and ensure the branches are not equal (properly updated)
        DefaultBranchPropertyStrategy strategy2 = new DefaultBranchPropertyStrategy(new BranchProperty[]{new RateLimitBranchProperty(2, "hour")});
        dummy1BranchSource.setStrategy(strategy2);
        dummy2BranchSource.setStrategy(strategy2);
        project.getSourcesList().clear();
        project.getSourcesList().add(dummy1BranchSource);
        project.getSourcesList().add(dummy2BranchSource);
        project.scheduleBuild2(0).getFuture().get();
        assertThat(getBranch(dummy1Project), is(not(equalTo(branch1))));
        assertThat(getBranch(dummy2Project), is(not(equalTo(branch2))));
    }

    private static Branch getBranch(FreeStyleProject project) {
        return project.getProperty(jenkins.branch.harness.BranchProperty.class).getBranch();
    }
}
